
#more {display: none;}





.mySlides {
  display: none;
  margin: 2em;
  
}

.mySlides img{
  width: 100%;
  position: initial;
  border-radius: 0.4em;
}

  
  /* Slideshow container */
div.slideshow-container {
  max-width: initial;
  width: 80%;
  position: relative;
  margin: auto;
  opacity: 0;
  transition: opacity 0.3s ease-in 0.8s, transform 0.3s ease-in 0.8s;
  transform: translateX(-50vw);
  -webkit-transform: translateX(-50vw);
  -ms-transform: translateX(-50vw);
}

.loaded div.slideshow-container {
  transform: translateX(0);
  -webkit-transform: translateX(0);
  -ms-transform: translateX(0);
  opacity: 1;
}
  /* Next & previous buttons */
.prev, .next {
  cursor: pointer;
  position: absolute;
  top: 50%;
  width: auto;
  padding: 16px;
  margin-top: -22px;
  color: rgb(51, 82, 148);
  font-weight: bold;
  font-size: 18px;
  transition: 0.6s ease;
  border-radius: 0.3em;
  user-select: none;
}
  
  /* Position the "next button" to the right */
.next {
  right: 0;
  border-radius: 0.3em;
}
  
  /* On hover, add a black background color with a little bit see-through */
.prev:hover, .next:hover {
  background-color: rgb(230, 216, 230);
}
  
  /* Caption text */
.text {
  color: #281597;
  font-size: 15px;
  padding: 8px 12px;
  position: absolute;
  bottom: 8px;
  width: 100%;
  text-align: center;
}
  
  /* Number text (1/3 etc) */
.numbertext {
  color: #f2f2f2;
  font-size: 12px;
  padding: 8px 12px;
  position: absolute;
  top: 0;
}
  
  /* The dots/bullets/indicators */
.dot {
  cursor: pointer;
  height: 15px;
  width: 15px;
  margin: 0 2px;
  background-color: rgb(71, 97, 168);
  border-radius: 50%;
  display: inline-block;
  transition: background-color 0.6s ease;
}
  
.active, .dot:hover {
  background-color:  rgb(190, 158, 190);
}
  
  /* Fading animation */
.mySlides .fade {
  -webkit-animation-name: fade;
  -webkit-animation-duration: 1.5s;
  animation-name: fade;
  animation-duration: 1.5s;
}

$breakpoints: (
  'phone':    ( max-width:  600px ),
  'tablet':   ( max-width:  900px ),
  'mobile':   ( max-width: 1024px ),
  'desktop':  ( min-width: 1025px ),
  'large':    ( min-width: 1600px ),
) !default;

@mixin bp($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
      @media #{inspect(map-get($breakpoints, $breakpoint))} {
        @content;
      }
    }
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}




